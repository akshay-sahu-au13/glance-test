{"id":"IJ9I","dependencies":[{"name":"C:\\Users\\Akshay\\OneDrive\\Documents\\GitHub\\language-webpeek\\tsconfig.json","includedInParent":true,"mtime":1627401691037},{"name":"C:\\Users\\Akshay\\OneDrive\\Documents\\GitHub\\language-webpeek\\.babelrc","includedInParent":true,"mtime":1627401691025},{"name":"C:\\Users\\Akshay\\OneDrive\\Documents\\GitHub\\language-webpeek\\package.json","includedInParent":true,"mtime":1628275493700}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.putInt = putInt;\nexports.getInt = getInt;\nexports.putLong = putLong;\nexports.getLong = getLong;\nexports.putFloat = putFloat;\nexports.getFloat = getFloat;\nexports.putString = putString;\nexports.getString = getString;\nexports.putBoolean = putBoolean;\nexports.getBoolean = getBoolean;\nexports.remove = remove;\nexports.containsKey = containsKey;\nexports.clearPreferences = clearPreferences;\nexports.getCategorySubscriptions = exports.updateCategorySubscriptions = exports.isCategorySubscribed = exports.getAllCategories = exports.getAllLanguages = exports.unsubscribeLanguage = exports.subscribeLanguage = exports.isLanguageSubscribed = exports.getAllSubscribedLanguages = exports.hideNativeUiElementsOfGlance = exports.glanceMoveToPrev = exports.glanceMoveToNext = exports.glanceUnhold = exports.glanceHold = exports.isGlanceHighlights = exports.sendCustomAnalytics = exports.launchApp = exports.launchAppAfterUnlock = exports.launchIntent = exports.launchIntentAfterUnlock = exports.isKeyguardLocked = exports.checkGlanceInterface = void 0;\n\n/* eslint-disable no-undef */\n// PreferencesStore\nfunction putInt(key, value) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      PreferencesStore.putInt(key, value);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n\nfunction getInt(key, defaultValue) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      return PreferencesStore.getInt(key, defaultValue);\n    } catch (err) {\n      console.log(err);\n      return defaultValue;\n    }\n  }\n}\n\nfunction putLong(key, value) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      PreferencesStore.putLong(key, value);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n\nfunction getLong(key, defaultValue) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      return PreferencesStore.getLong(key, defaultValue);\n    } catch (err) {\n      console.log(err);\n      return defaultValue;\n    }\n  }\n}\n\nfunction putFloat(key, value) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      PreferencesStore.putFloat(key, value);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n\nfunction getFloat(key, defaultValue) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      return PreferencesStore.getFloat(key, defaultValue);\n    } catch (err) {\n      console.log(err);\n      return defaultValue;\n    }\n  }\n}\n\nfunction putString(key, value) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      PreferencesStore.putString(key, value);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n\nfunction getString(key, defaultValue) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      return PreferencesStore.getString(key, defaultValue);\n    } catch (err) {\n      console.log(err);\n      return defaultValue;\n    }\n  }\n}\n\nfunction putBoolean(key, value) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      PreferencesStore.putBoolean(key, value);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n\nfunction getBoolean(key, defaultValue) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      return PreferencesStore.getBoolean(key, defaultValue);\n    } catch (err) {\n      console.log(err);\n      return defaultValue;\n    }\n  }\n}\n\nfunction remove(key) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      PreferencesStore.remove(key);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n\nfunction containsKey(key) {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      return PreferencesStore.containsKey(key);\n    } catch (err) {\n      console.log(err);\n      return false;\n    }\n  }\n}\n\nfunction clearPreferences() {\n  if (typeof PreferencesStore != 'undefined') {\n    try {\n      PreferencesStore.clear();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n\nvar checkGlanceInterface = typeof GlanceAndroidInterface != 'undefined' || typeof AndroidUtils != 'undefined';\nexports.checkGlanceInterface = checkGlanceInterface;\n\nvar isKeyguardLocked = function isKeyguardLocked() {\n  if (typeof AndroidUtils != 'undefined') {\n    return AndroidUtils.isKeyguardLocked()();\n  }\n}; // --------- For Xiaomi -------\n\n\nexports.isKeyguardLocked = isKeyguardLocked;\n\nvar launchIntentAfterUnlock = function launchIntentAfterUnlock(intentAction, intentData) {\n  if (typeof GlanceAndroidInterface != 'undefined') {\n    GlanceAndroidInterface.launchIntentAfterUnlock(intentAction, intentData);\n  }\n};\n\nexports.launchIntentAfterUnlock = launchIntentAfterUnlock;\n\nvar launchIntent = function launchIntent(intentAction, intentData) {\n  if (typeof GlanceAndroidInterface != 'undefined') {\n    GlanceAndroidInterface.launchIntent(intentAction, intentData);\n  }\n}; // --------- For Samsung -------\n\n\nexports.launchIntent = launchIntent;\n\nvar launchAppAfterUnlock = function launchAppAfterUnlock(appPackageName, deepLinkUrl) {\n  if (typeof GlanceAndroidInterface != 'undefined') {\n    GlanceAndroidInterface.launchAppAfterUnlock(appPackageName, deepLinkUrl);\n  }\n};\n\nexports.launchAppAfterUnlock = launchAppAfterUnlock;\n\nvar launchApp = function launchApp(appPackageName, deepLinkUrl) {\n  if (typeof GlanceAndroidInterface != 'undefined') {\n    GlanceAndroidInterface.launchApp(appPackageName, deepLinkUrl);\n  }\n};\n\nexports.launchApp = launchApp;\n\nvar sendCustomAnalytics = function sendCustomAnalytics(_ref) {\n  var extras = _ref.extras,\n      eventType = _ref.eventType;\n  console.log('eventType:', eventType, ' extras:', extras);\n\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    GlanceAndroidInterface.sendCustomAnalyticsEvent(eventType, JSON.stringify(extras));\n  }\n};\n\nexports.sendCustomAnalytics = sendCustomAnalytics;\n\nvar isGlanceHighlights = function isGlanceHighlights() {\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    return GlanceAndroidInterface === null || GlanceAndroidInterface === void 0 ? void 0 : GlanceAndroidInterface.isHighlights();\n  }\n};\n\nexports.isGlanceHighlights = isGlanceHighlights;\n\nvar glanceHold = function glanceHold() {\n  console.log('glanceHold');\n\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    GlanceAndroidInterface === null || GlanceAndroidInterface === void 0 ? void 0 : GlanceAndroidInterface.holdGlance();\n  }\n};\n\nexports.glanceHold = glanceHold;\n\nvar glanceUnhold = function glanceUnhold() {\n  console.log('glanceUnhold');\n\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    GlanceAndroidInterface === null || GlanceAndroidInterface === void 0 ? void 0 : GlanceAndroidInterface.unHoldGlance();\n  }\n};\n\nexports.glanceUnhold = glanceUnhold;\n\nvar glanceMoveToNext = function glanceMoveToNext() {\n  console.log('Moved to Next Glance');\n\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    GlanceAndroidInterface === null || GlanceAndroidInterface === void 0 ? void 0 : GlanceAndroidInterface.moveToNextGlance();\n  }\n};\n\nexports.glanceMoveToNext = glanceMoveToNext;\n\nvar glanceMoveToPrev = function glanceMoveToPrev() {\n  console.log('glanceMoveToPrev');\n\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    GlanceAndroidInterface === null || GlanceAndroidInterface === void 0 ? void 0 : GlanceAndroidInterface.moveToPrevGlance();\n  }\n};\n\nexports.glanceMoveToPrev = glanceMoveToPrev;\n\nvar hideNativeUiElementsOfGlance = function hideNativeUiElementsOfGlance(elements) {\n  // Hides the given native element\n  // console.log('Called Function to hide native elements!');\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    elements.map(function (element) {\n      GlanceAndroidInterface === null || GlanceAndroidInterface === void 0 ? void 0 : GlanceAndroidInterface.hideNativeUiElement(element);\n    });\n  }\n}; //-----------------------------------Language sdk js bridges----------------------------------------//\n\n\nexports.hideNativeUiElementsOfGlance = hideNativeUiElementsOfGlance;\n\nvar getAllSubscribedLanguages = function getAllSubscribedLanguages() {\n  // console.log('getAllSubscribedLanguages');\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    return GlanceAndroidInterface.getAllSubscribedLanguages();\n  } else {\n    return ['en']; // comment this line later\n  } //This returns List<String> as json string where String is languageId\n\n};\n\nexports.getAllSubscribedLanguages = getAllSubscribedLanguages;\n\nvar isLanguageSubscribed = function isLanguageSubscribed(languageId) {\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    return GlanceAndroidInterface.isLanguageSubscribed(languageId);\n  } else {\n    return true; // comment this line later\n  } // return type true and false\n  //Method will tell if languageId id is subscribed (true) or not (false).\n\n};\n\nexports.isLanguageSubscribed = isLanguageSubscribed;\n\nvar subscribeLanguage = function subscribeLanguage(languageId) {\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    GlanceAndroidInterface.subscribeLanguage(languageId);\n  } else {\n    console.log('Language Subscribed!: ', languageId);\n  } //Input is languageId to subscribe\n\n};\n\nexports.subscribeLanguage = subscribeLanguage;\n\nvar unsubscribeLanguage = function unsubscribeLanguage(languageId) {\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    GlanceAndroidInterface.unsubscribeLanguage(languageId);\n  } else {\n    console.log('Language Unsubscribed: ', languageId);\n  } //Input is languageId to unsubscribe\n\n};\n\nexports.unsubscribeLanguage = unsubscribeLanguage;\n\nvar getAllLanguages = function getAllLanguages() {\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    return GlanceAndroidInterface.getAllLanguages();\n  } else {\n    return '[{\"displayName\":\"tamil\",\"id\":\"ta\",\"isSubscriptionModifiable\":false},{\"displayName\":\"kannada\",\"id\":\"kn\",\"isSubscriptionModifiable\":true},{\"displayName\":\"bangla\",\"id\":\"bn\",\"isSubscriptionModifiable\":true},{\"displayName\":\"telugu\",\"id\":\"te\",\"isSubscriptionModifiable\":false},{\"displayName\":\"hindi\",\"id\":\"hi\",\"isSubscriptionModifiable\":false},{\"displayName\":\"marathi\",\"id\":\"mr\",\"isSubscriptionModifiable\":true},{\"displayName\":\"english\",\"id\":\"en\",\"isSubscriptionModifiable\":false}]';\n  } // It returns serialized (json) map of list<GlanceLanguage>\n  // [{'displayName':'English','id':'en','isSubscriptionModifiable':false}]\n\n}; // -------------------------------------- Categories SDK JS Bridge ------------------------------------//\n\n\nexports.getAllLanguages = getAllLanguages;\n\nvar getAllCategories = function getAllCategories() {\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    return GlanceAndroidInterface.getAllCategories();\n  } //This returns List<GlanceCategories> as json string where GlanceCategory has {id, displayName, isSubscriptionModifiable}\n\n};\n\nexports.getAllCategories = getAllCategories;\n\nvar isCategorySubscribed = function isCategorySubscribed(categoryId) {\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    return GlanceAndroidInterface.isCategorySubscribed(categoryId); // return type true and false\n  } //Method will tell if category id is subscribed (true) or not (false).\n\n};\n\nexports.isCategorySubscribed = isCategorySubscribed;\n\nvar updateCategorySubscriptions = function updateCategorySubscriptions(serializedCategorySubscriptionMap) {\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    GlanceAndroidInterface.updateCategorySubscriptions(serializedCategorySubscriptionMap);\n  } else {\n    catgData = JSON.parse(serializedCategorySubscriptionMap);\n    console.log('Category List Updated!!');\n  } //Input is serialized (json) map of categoryIds to subscription state (true/false)\n\n};\n\nexports.updateCategorySubscriptions = updateCategorySubscriptions;\n\nvar getCategorySubscriptions = function getCategorySubscriptions() {\n  if (typeof GlanceAndroidInterface !== 'undefined') {\n    return GlanceAndroidInterface.getCategorySubscriptions();\n  } else {\n    return JSON.stringify(catgData);\n  }\n}; // It returns serialized (json) map of active categoryIds and their subscription state(boolean) .\n// Example : \"{\\\"#daily_digest\\\":true,\\\"#entertainment\\\":false, \\\"#travel\\\":true}\";\n\n\nexports.getCategorySubscriptions = getCategorySubscriptions;"},"sourceMaps":null,"error":null,"hash":"1cacc4dee87c9d60a54a6629a90bb127","cacheData":{"env":{}}}